# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
view(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
view(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
view(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
view(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
view()
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View()
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages("dplyr")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gain, (arr_delay - dep_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gain = (arr_delay - dep_delay))
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_lost = (arr_delay - dep_delay))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, time_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_lost = arr_delay - dep_delay) %>%
arrange(time_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == SEA) %>%
pull(origin, dest, time_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origin, dest, time_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origin, dest, time_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origin)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origi, destn)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origi, dest)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(origi, dest, time_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_seatac <- flights %>%
filter(dest == "SEA") %>%
pull(time_lost)
# On average, did flights to SeaTac gain or loose time?
hist(flights_seatac$time_lost)
# On average, did flights to SeaTac gain or loose time?
hist(flights_seatac)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', StringAsFactors = FALSE)
setwd("E:/CS/INFO201/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[organization]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants["organization"]
View(organization)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants["organization"]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants["organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[["organization"]]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(organization["total_amount"])
# What was the mean grant value?
mean(organization[["total_amount"]])
# What was the mean grant value?
total_grants <- organization[["total_amount"]]
# What was the mean grant value?
mean(grants[["total_amount"]])
# What was the dollar amount of the largest grant?
max(grants[["total_amount"]])
# What was the dollar amount of the largest grant?
max_grant <- max(grants[["total_amount"]])
# What was the dollar amount of the smallest grant?
min_grant <- min(grants[["total_amount"]])
# Which organization received the largest grant?
grants[grants["total_amount"] == max_grant, "organization"]
# Which organization received the smallest grant?
grants[grants["total_amount"] == min_grant, "organization"]
# How many grants were awarded in 2010?
grants_2010 <- grants[substring(grants["Grant.start.date"], 7, 10) == "2010", ]
View(grants_2010)
