# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast -> c("Ramen", "water", "bread")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast -> c("Ramen", "water", "bread")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast -> c("Ramen", "water", "bread")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Ramen", "water", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Spam Musubi", "Kalua pork")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
View(meals)
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "pie")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
print(dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[c("breakfast", "lunch")]
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Ramen", "water", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Spam Musubi", "Kalua pork")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "pie")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
print(dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[c("breakfast", "lunch")]
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector){
new_vector <- c(meal_vactor, "pizza")
return(new_vector)
}
add_pizza(c("nachos"))
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector){
new_vector <- c(meal_vector, "pizza")
return(new_vector)
}
add_pizza(c("nachos"))
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
View(better_meals)
View(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals$)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
View(better_meals)
View(better_meals)
employees <- paste("Employee", c(1:100))
employees <- paste("Employee", c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_adjust <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
people <- data.frame(employees, salaries, annual_adjust, stringsAsFactors=FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries, annual_adjust, stringsAsFactors=FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries[["salaries_2018"]] <- salaries[["salaries"]] + salaries[["annual_adjust"]]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[["raised"]] <- salaries[["annual_adjust"]] > 0
View(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
raised_employee <- salaries[salaries$raised == TRUE]
# How many employees got a raise?
raised_employee <- salaries[salaries$raised]
# How many employees got a raise?
raised_employee <- salaries[["raised"]] == TRUE
# How many employees got a raise?
raised_employee <- salaries[salaries$raised == TRUE, "employees"]
# What was the dollar value of the highest raise?
max_raise <- max(salaries[["annual_adjust"]])
# What was the "name" of the employee who received the highest raise?
max_raise_employee <- salaries[salaries$annual_adjust == max_raise, employee]
# What was the "name" of the employee who received the highest raise?
max_raise_employee <- salaries[salaries$annual_adjust == max_raise, employees]
# What was the "name" of the employee who received the highest raise?
max_raise_employee <- salaries[salaries$annual_adjust == max_raise, "employees"]
# What was the largest decrease in salaries between the two years?
min_raise <- min(salaries[["annual_adjust"]])
# What was the name of the employee who recieved largest decrease in salary?
min_raise_employee <- salaries[salaries$annual_adjust == min_raise, "employees"]
# What was the average salary change?
average_raise <- mean(salaries[["annual_adjust"]])
# For people who did not get a raise, how much money did they lose on average?
not_raised <- salaries[salaries$raised == FALSE, "annual_adjust"]
mean(not_raised)
# Write a .csv file of your salary data to your working directory
write(salaries, "E:\CS\INFO201\book-exercises\chapter-10-exercises\exercise-2\\salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write(salaries, "E:\\CS\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write(salaries, "E:\\CS\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write(salaries, "E:\\CS\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv")
# Write a .csv file of your salary data to your working directory
write(salaries, "E:\\CS\\INFO201\\book-exercises\\chapter-10-exercises\\exercise-2\\salaries.csv", row.names = FALSE)
